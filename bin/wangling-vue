#! /usr/bin/env node

const program = require('commander')
// 命令行添加颜色
const chalk = require('chalk')

const cleanArgs = cmd => {
  const args = {}
  cmd.options.forEach(o => {
    const key = o.long.slice(2)
    if (cmd[key]) {
      args[key] = cmd[key]
    }
  })
  return args
}
// 万一崇明了呢？强制创建的模式
program
  .command('create <app-name>')
  .description('create a new project')
  .option('-f, --force', 'overwrite target directory if it exists')
  .action((name, cmd) => {
    require('../lib/create')(name, cleanArgs(cmd))
  })

/*
* 比如在vue脚手架里
* vue config --set a 1 => 配置文件中 设置a = 1
* vue config --get a => 获取某个属性的值
* */
program
  .command('config [value]')
  .description('inspect and modify the config')
  .option('-g, --get <path>', '获取配置')
  .option('-s, --set <path> <value>', '设置某一项配置')
  .option('-d, --delete <path>', '删除某一项配置')
  .action((value, cmd) => {
    console.log(value, cleanArgs(cmd))
  })

program
  .command('ui')
  .description('start and open wangling-cli ui')
  .option('-p, --port <port>', '设置端口号 wangling-vue ui -p <port>')
  .action((cmd) => {
    console.log(cleanArgs(cmd))
  })

program
  .on('--help', function() {
    console.log()
    console.log(`Run ${chalk.blue('wangling-vue <command> --help')} show details`)
    console.log()
  })

program
  .usage(`<command> [option]`)
  .version(require('../package.json').version, '-V', 'display version')
  .parse(process.argv)
